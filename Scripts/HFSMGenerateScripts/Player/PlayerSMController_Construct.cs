using RPGCore.AI.HFSM;
//Automatically generated code
[StateMachineController(ControllerName = "PlayerSMController")]
public partial class PlayerSMController : StateMachineScriptController
{
	public override StateMachine ConstructStateMachine()
	{
		StateMachineHandler.BeginStateMachine(this, "Root")
			.AddService("ProcessPlayerInput",ServiceType.Update,0).OnService(on_ProcessPlayerInput_service)
			.AddService("ProcessGetHit",ServiceType.Update,0).OnService(on_ProcessGetHit_service)
			.AddStateMachine("Battle", false)
				.AddService("BattleService",ServiceType.Update,0).OnService(on_BattleService_service)
				.AddStateMachine("BattleFreeView", true)
					.AddState("BattleFreeViewIdle", true).OnExecute(on_BattleFreeViewIdle_execute)
					.AddState("BattleFreeViewRun", false).OnExecute(on_BattleFreeViewRun_execute)
					.AddState("BattleFreeViewSprint", false).OnExecute(on_BattleFreeViewSprint_execute)
					.AddTemporaryState("Roll").OnExecute(on_Roll_execute)
						.CanExit(can_Roll_exit)
					.SwitchHandle("BattleFreeViewIdle").ToState("BattleFreeViewRun",false)
						.BoolCondition("IsWalk",true)
					.SwitchHandle("BattleFreeViewRun").ToState("BattleFreeViewSprint",false)
						.BoolCondition("IsRun",true)
					.SwitchHandle("BattleFreeViewSprint").ToState("BattleFreeViewIdle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("BattleFreeViewRun").ToState("BattleFreeViewIdle",false)
						.BoolCondition("IsIdle",true)
					.SwitchHandle("BattleFreeViewIdle").ToState("BattleFreeViewSprint",false)
						.BoolCondition("IsWalk",true)
						.BoolCondition("IsRun",true)
					.SwitchHandle("BattleFreeViewSprint").ToState("BattleFreeViewRun",false)
						.BoolCondition("IsRun",false)
					.SwitchHandle("Any").ToState("Roll",true)
						.TriggerCondition("RollOrDodge")
					.FinishHandle()
				.AddStateMachine("BattleLookAt", false)
					.AddService("BattleLookAtService",ServiceType.Update,0).OnService(on_BattleLookAtService_service)
					.AddState("BattleLookAtIdle", true).OnExecute(on_BattleLookAtIdle_execute)
					.AddState("BattleLookAtWalk", false).OnExecute(on_BattleLookAtWalk_execute)
					.AddTemporaryState("Dodge").OnExecute(on_Dodge_execute)
						.CanExit(can_Dodge_exit)
					.SwitchHandle("Any").ToState("Dodge",true)
						.TriggerCondition("RollOrDodge")
					.SwitchHandle("BattleLookAtIdle").ToState("BattleLookAtWalk",false)
						.BoolCondition("IsWalk",true)
					.SwitchHandle("BattleLookAtWalk").ToState("BattleLookAtIdle",false)
						.BoolCondition("IsWalk",false)
					.FinishHandle()
				.AddTemporaryState("Attack").OnExecute(on_Attack_execute)
					.CanExit(can_Attack_exit)
				.SwitchHandle("BattleFreeView").ToStateMachine("BattleLookAt")
					.BoolCondition("LookAtTarget",true)
				.SwitchHandle("BattleLookAt").ToStateMachine("BattleFreeView")
					.BoolCondition("LookAtTarget",false)
				.SwitchHandle("Any").ToState("Attack",true)
					.TriggerCondition("Attacking")
				.FinishHandle()
			.AddTemporaryState("GetHit").OnExecute(on_GetHit_execute)
				.CanExit(can_GetHit_exit)
			.AddTemporaryState("Dead").OnExecute(on_Dead_execute)
				.CanExit(can_Dead_exit)
			.AddStateMachine("Normal", true)
				.AddState("NormalIdle", true).OnExecute(on_NormalIdle_execute)
				.AddState("NormalWalk", false).OnExecute(on_NormalWalk_execute)
				.AddState("NormalRun", false).OnExecute(on_NormalRun_execute)
				.SwitchHandle("NormalIdle").ToState("NormalWalk",false)
					.BoolCondition("IsWalk",true)
					.BoolCondition("IsRun",false)
				.SwitchHandle("NormalWalk").ToState("NormalRun",false)
					.BoolCondition("IsRun",true)
				.SwitchHandle("NormalRun").ToState("NormalIdle",false)
					.BoolCondition("IsIdle",true)
				.SwitchHandle("NormalWalk").ToState("NormalIdle",false)
					.BoolCondition("IsIdle",true)
				.SwitchHandle("NormalIdle").ToState("NormalRun",false)
					.BoolCondition("IsRun",true)
					.BoolCondition("IsWalk",true)
				.SwitchHandle("NormalRun").ToState("NormalWalk",false)
					.BoolCondition("IsRun",false)
				.FinishHandle()
			.SwitchHandle("Any").ToState("GetHit",true)
				.TriggerCondition("GetHit")
			.SwitchHandle("Any").ToState("Dead",true)
				.TriggerCondition("Dead")
			.SwitchHandle("Normal").ToStateMachine("Battle")
				.BoolCondition("IsOnBattle",true)
			.SwitchHandle("Battle").ToStateMachine("Normal")
				.BoolCondition("IsOnBattle",false)
			.FinishHandle()
			.EndHandle();
		return StateMachineHandler.EndStateMachine();
	}
}
